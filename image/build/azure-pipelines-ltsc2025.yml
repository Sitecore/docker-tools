trigger:
  branches:
    include:
    - main
    - dev
    - 'release/*'
  paths:
    include:
    - 'image/*'
    exclude:
    - 'powershell/*'

pr:
  branches:
    include:
    - main
    - dev
    - 'release/*'
  paths:
    include:
    - 'image/*'
    exclude:
    - 'powershell/*'

resources:
- repo: self

variables:
  sitecoreVersion: $(SITECORE_VERSION)
  revision: $[counter(format('sitecoreVersion{0}', variables['sitecoreVersion']), 100)]
  osName: $(TARGETOS_LTSC2025)
  baseImage: mcr.microsoft.com/windows/nanoserver:$(osName)
  buildImage: mcr.microsoft.com/windows/servercore:$(osName)
  buildNumber: $(Build.BuildID)
  azureContainerRegistry: $(ACR_ContainerRegistry)
  azureSubscriptionEndpoint: AKSServiceConnections
  sourceBranch: $(Build.SourceBranch)

pool: $(POOLNAME_LTSC2025)

stages:

- stage: Versioning

  jobs:
  - job: Tagging
    steps:

    - task: PowerShell@2
      name: Tags
      displayName: Generate tags
      inputs:
        targetType: 'inline'
        script: |
            Write-Host "Pulling base image $(baseImage)..."
            docker pull $(baseImage)
            [string] $osVersion = (docker image inspect $(baseImage) | ConvertFrom-Json).OsVersion
            Write-Host "Image OS version is '$osVersion'"
            
            Write-Host "Setting sourceBranch to $(sourceBranch)"
            if("$(sourceBranch)" -eq "refs/heads/main" -or "$(sourceBranch)" -eq "refs/heads/release/$(sitecoreVersion)"){
                [string] $stability = ""
                [string] $namespace = "tools"
            }else{
                [string] $stability = "-unstable"
                [string] $namespace = "experimental"
            }
            
            Write-Host "Setting stability to '$stability'"
            Write-Host "Setting namespace to '$namespace'"
            Write-Host "##vso[task.setvariable variable=namespace;isOutput=true]$namespace"
            [string] $longTag = "$(sitecoreVersion).$(revision).$(buildNumber)-$osVersion-$(osName)$stability"
            [string] $shortTag = "$(sitecoreVersion)-$(osName)$stability"
            Write-Host "Setting long tag to '$longTag'"
            Write-Host "Setting short tag to '$shortTag'"
            Write-Host "##vso[task.setvariable variable=longTag;isOutput=true]$longTag"
            Write-Host "##vso[task.setvariable variable=shortTag;isOutput=true]$shortTag"
            
- stage: Build
  dependsOn: Versioning

  jobs:
  - job: Build
    displayName: Build image
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
      namespace: $[stageDependencies.Versioning.Tagging.outputs['Tags.namespace']]
    steps:

    - task: AzureCLI@2
      displayName: Build and push Docker image
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Set environment variables
          $env:DOCKER_BUILDKIT = "1"
          
          # Login to ACR
          Write-Host "Logging in to Azure Container Registry: $(azureContainerRegistry)"
          az acr login --name $(azureContainerRegistry)
          
          # Build the image
          Write-Host "Building Docker image..."
          $imageName = "$(azureContainerRegistry)/$(namespace)/sitecore-docker-tools-assets"
          $longTag = "$(longTag)"
          $shortTag = "$(shortTag)"
          
          Write-Host "Building image: $imageName"
          Write-Host "Long tag: $longTag"
          Write-Host "Short tag: $shortTag"
          
          # Build and tag the image
          docker build `
            --build-arg BASE_IMAGE=$(baseImage) `
            --build-arg BUILD_IMAGE=$(buildImage) `
            --force-rm `
            -f "$(Build.SourcesDirectory)/image/src/Dockerfile" `
            -t "${imageName}:${longTag}" `
            -t "${imageName}:${shortTag}" `
            "$(Build.SourcesDirectory)/image/src"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Docker build failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          
          # Push the images
          Write-Host "Pushing image with long tag: ${imageName}:${longTag}"
          docker push "${imageName}:${longTag}"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Docker push failed for long tag with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          
          Write-Host "Pushing image with short tag: ${imageName}:${shortTag}"
          docker push "${imageName}:${shortTag}"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Docker push failed for short tag with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          
          Write-Host "Build and push completed successfully!"

- stage: Test
  dependsOn: Build

  jobs:
  - job: Pester
    displayName: Run Pester tests
    steps:

    - task: Pester@9
      inputs:
        scriptFolder: "$(Build.SourcesDirectory)/image/test/*"
        resultsFile: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        usePSCore: False
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "NUnit"
        testResultsFiles: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        failTaskOnFailedTests: true

- stage: Push
  dependsOn:
  - Versioning
  - Test

  jobs:
  - job: Push
    displayName: Push additional tags
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
      namespace: $[stageDependencies.Versioning.Tagging.outputs['Tags.namespace']]
    steps:

    - task: AzureCLI@2
      displayName: Push additional tags
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Login to ACR
          Write-Host "Logging in to Azure Container Registry: $(azureContainerRegistry)"
          az acr login --name $(azureContainerRegistry)
          
          $imageName = "$(azureContainerRegistry)/$(namespace)/sitecore-docker-tools-assets"
          $longTag = "$(longTag)"
          $shortTag = "$(shortTag)"
          
          Write-Host "Pulling and retagging images if needed..."
          Write-Host "Image: $imageName"
          Write-Host "Long tag: $longTag"
          Write-Host "Short tag: $shortTag"
          
          # Additional tagging logic can be added here if needed
          # For now, the images are already pushed in the Build stage
          
          Write-Host "Images are already available in ACR:"
          Write-Host "- ${imageName}:${longTag}"
          Write-Host "- ${imageName}:${shortTag}"