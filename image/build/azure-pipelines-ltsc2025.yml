trigger:
  branches:
    include:
    - main
    - dev
    - 'release/*'
  paths:
    include:
    - 'image/*'
    exclude:
    - 'powershell/*'

pr:
  branches:
    include:
    - main
    - dev
    - 'release/*'
  paths:
    include:
    - 'image/*'
    exclude:
    - 'powershell/*'

resources:
- repo: self

variables:
  sitecoreVersion: $(SITECORE_VERSION)
  revision: $[counter(format('sitecoreVersion{0}', variables['sitecoreVersion']), 100)]
  osName: $(TARGETOS_LTSC2025)
  baseImage: mcr.microsoft.com/windows/nanoserver:$(osName)
  buildImage: mcr.microsoft.com/windows/servercore:$(osName)
  buildNumber: $(Build.BuildID)
  azureContainerRegistry: $(ACR_ContainerRegistry)
  azureSubscriptionEndpoint: AKSServiceConnections
  sourceBranch: $(Build.SourceBranch)

pool: $(POOLNAME_LTSC2025)

stages:

- stage: Versioning

  jobs:
  - job: Tagging
    steps:

    - task: PowerShell@2
      name: Tags
      displayName: Generate tags
      inputs:
        targetType: 'inline'
        script: |
            Write-Host "Pulling base image $(baseImage)..."
            docker pull $(baseImage)
            [string] $osVersion = (docker image inspect $(baseImage) | ConvertFrom-Json).OsVersion
            Write-Host "Image OS version is '$osVersion'"
            
            Write-Host "Setting sourceBranch to $(sourceBranch)"
            if("$(sourceBranch)" -eq "refs/heads/main" -or "$(sourceBranch)" -eq "refs/heads/release/$(sitecoreVersion)"){
                [string] $stability = ""
                [string] $namespace = "tools"
            }else{
                [string] $stability = "-unstable"
                [string] $namespace = "experimental"
            }
            
            Write-Host "Setting stability to '$stability'"
            Write-Host "Setting namespace to '$namespace'"
            Write-Host "##vso[task.setvariable variable=namespace;isOutput=true]$namespace"
            [string] $longTag = "$(sitecoreVersion).$(revision).$(buildNumber)-$osVersion-$(osName)$stability"
            [string] $shortTag = "$(sitecoreVersion)-$(osName)$stability"
            Write-Host "Setting long tag to '$longTag'"
            Write-Host "Setting short tag to '$shortTag'"
            Write-Host "##vso[task.setvariable variable=longTag;isOutput=true]$longTag"
            Write-Host "##vso[task.setvariable variable=shortTag;isOutput=true]$shortTag"
            
- stage: Build
  dependsOn: Versioning

  jobs:
  - job: Build
    displayName: Build image
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
      namespace: $[stageDependencies.Versioning.Tagging.outputs['Tags.namespace']]
    steps:

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        containerRegistry: $(azureSubscriptionEndpoint)
        command: login

    - task: Docker@2
      displayName: Build and push image
      inputs:
        containerRegistry: $(azureSubscriptionEndpoint)
        repository: $(namespace)/sitecore-docker-tools-assets
        command: buildAndPush
        Dockerfile: '**/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/image/src'
        tags: |
          $(longTag)
          $(shortTag)
        arguments: --build-arg BASE_IMAGE=$(baseImage) --build-arg BUILD_IMAGE=$(buildImage) --force-rm
      env:
        DOCKER_BUILDKIT: 1

- stage: Test
  dependsOn: Build

  jobs:
  - job: Pester
    displayName: Run Pester tests
    steps:

    - task: Pester@9
      inputs:
        scriptFolder: "$(Build.SourcesDirectory)/image/test/*"
        resultsFile: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        usePSCore: False
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "NUnit"
        testResultsFiles: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        failTaskOnFailedTests: true

- stage: Push
  dependsOn:
  - Versioning
  - Test

  jobs:
  - job: Push
    displayName: Push additional tags
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
      namespace: $[stageDependencies.Versioning.Tagging.outputs['Tags.namespace']]
    steps:

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        containerRegistry: $(azureSubscriptionEndpoint)
        command: login

    - task: PowerShell@2
      displayName: Tag and push additional versions
      inputs:
        targetType: 'inline'
        script: |
          $registry = "$(azureContainerRegistry)"
          $namespace = "$(namespace)"
          $longTag = "$(longTag)"
          $shortTag = "$(shortTag)"
          
          Write-Host "Tagging image for registry: $registry"
          
          # Tag the image with full registry path
          docker tag "${namespace}/sitecore-docker-tools-assets:${longTag}" "${registry}/${namespace}/sitecore-docker-tools-assets:${longTag}"
          docker tag "${namespace}/sitecore-docker-tools-assets:${shortTag}" "${registry}/${namespace}/sitecore-docker-tools-assets:${shortTag}"
          
          # Push the tagged images
          docker push "${registry}/${namespace}/sitecore-docker-tools-assets:${longTag}"
          docker push "${registry}/${namespace}/sitecore-docker-tools-assets:${shortTag}"