parameters:
  - name: 'PoolName'
    default: ''
  - name: 'TargetOs'
    default: 'LTSC2019'
    type: string
  - name: 'Sitecore_Version'
    default: ''
  - name: 'OsTest'
    default: ''
    type: string

variables:
- name: sitecoreVersion
  value: ${{ parameters.Sitecore_Version }}
- name: Os_Test
  ${{ if eq(upper(parameters.OsTest), 'ososos') }}:
    value: '12345'
  ${{ if eq(upper(parameters.OsTest), 'OSOSOS') }}:
    value: ${{ parameters.OsTest }}
- ${{ if eq(upper(parameters.TargetOs), 'LTSC2019') }}:
  - name: osName
    value: '1809'
  - name: baseImage
    value: mcr.microsoft.com/windows/nanoserver:$(osName)
  - name: buildImage
    value: mcr.microsoft.com/windows/servercore:$(TARGETOS_LTSC2019)
- ${{ if eq(upper(parameters.TargetOs), 'LTSC2022') }}: 
  - name: osName
    value: ${{ parameters.TargetOs }}
  - name: baseImage
    value: mcr.microsoft.com/windows/nanoserver:$(osName)
  - name: buildImage
    value: mcr.microsoft.com/windows/servercore:$(osName)
- name: buildNumber
  value: $(Build.BuildID)
- name: azureContainerRegistry
  value: $(ACR_ContainerRegistry)
- name: azureSubscriptionEndpoint
  value: AKSServiceConnections
- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - name: stability
    value: ''
  - name: namespace
    value: 'tools'
- ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
  - name: stability
    value: '-unstable'
  - name: namespace
    value: 'experimental'
- name: revision
  value: $[counter(format('sitecoreVersion{0}', variables['sitecoreVersion']), 100)]

stages:
- stage: Versioning

  jobs:
  - job: Tagging
    pool:
      name: ${{ parameters.PoolName }}
    steps:
    
    - task: PowerShell@2
      name: Tags
      displayName: Generate tags
      inputs:
        targetType: 'inline'
        script: |
            Write-Host "stability is $(stability)..."
            Write-Host "namespace is $(namespace)..."
            Write-Host "Os_Test is $(Os_Test)..."
            Write-Host "PoolName is ${{ parameters.PoolName }}..."
            Write-Host "TargetOs is ${{ parameters.TargetOs }}..."
            Write-Host "Sitecore_Version is ${{ parameters.Sitecore_Version }}..."
            Write-Host "sitecoreVersion is $(sitecoreVersion)..."
            Write-Host "osName is $(osName)..."
            
            

            Write-Host "Pulling base image $(baseImage)..."
            docker pull $(baseImage)

            [string] $osVersion = (docker image inspect $(baseImage) | ConvertFrom-Json).OsVersion
            Write-Host "Image OS version is '$osVersion'"

            [string] $longTag = "$(sitecoreVersion).$(revision).$(buildNumber)-$osVersion-$(osName)$(stability)"
            [string] $shortTag = "$(sitecoreVersion)-$(osName)$(stability)"
            Write-Host "Setting long tag to '$longTag'"
            Write-Host "Setting short tag to '$shortTag'"
            Write-Host "##vso[task.setvariable variable=longTag;isOutput=true]$longTag"
            Write-Host "##vso[task.setvariable variable=shortTag;isOutput=true]$shortTag"
            
- stage: Build
  dependsOn: Versioning

  jobs:
  - job: Build
    pool:
      name: ${{ parameters.PoolName }}
    displayName: Build image
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
    steps:
    
    - task: DockerCompose@0
      displayName: Building image
      inputs:
        containerregistrytype: Azure Container Registry
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(azureContainerRegistry)/$(namespace)/
          VERSION=$(longTag)
          BASE_IMAGE=$(baseImage)
          BUILD_IMAGE=$(buildImage)
        action: Build services
        additionalImageTags: '$(shortTag)'
        arguments: '--force-rm'
        currentWorkingDirectory: '$(Build.SourcesDirectory)/image/src'

- stage: Test
  dependsOn: Build

  jobs:
  - job: Pester
    pool:
      name: ${{ parameters.PoolName }}
    displayName: Run Pester tests
    steps:

    - task: Pester@9
      inputs:
        scriptFolder: "$(Build.SourcesDirectory)/image/test/*"
        resultsFile: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        usePSCore: False
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "NUnit"
        testResultsFiles: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        failTaskOnFailedTests: true
        
- stage: Push
  dependsOn:
  - Versioning
  - Test
  condition: ne(variables['Build.Reason'], 'PullRequest')

  jobs:
  - job: Push
    pool:
      name: ${{ parameters.PoolName }}
    displayName: Push image
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
    steps:

    - task: DockerCompose@0
      displayName: Pushing image
      inputs:
        containerregistrytype: Azure Container Registry
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(azureContainerRegistry)/$(namespace)/
          VERSION=$(longTag)
          BASE_IMAGE=$(baseImage)
          BUILD_IMAGE=$(buildImage)
        action: Push services
        additionalImageTags: '$(shortTag)'
        currentWorkingDirectory: '$(Build.SourcesDirectory)/image/src'